[
  [
    {
      "tags": [
        {
          "type": "function",
          "string": "o-lerp(color1, color2, [factor=0.5])",
          "html": "<p>o-lerp(color1, color2, [factor=0.5])</p>"
        },
        {
          "type": "desc",
          "string": "Interpolate (blend) `color1` and `color2` by `factor`.\nThe algorhythm used is simple and naive; added here\nfor convenience. For more serious use, see\n[postcss-color-mix](https://github.com/iamstarkov/postcss-color-mix)",
          "html": "<p>Interpolate (blend) <code>color1</code> and <code>color2</code> by <code>factor</code>.<br />The algorhythm used is simple and naive; added here<br />for convenience. For more serious use, see<br /><a href=\"https://github.com/iamstarkov/postcss-color-mix\">postcss-color-mix</a></p>"
        },
        {
          "type": "example",
          "string": "```\n// input\no-lerp(#ff0000, rgb(0,0,255,0))\n// output\nrgba(128,0,128,0.5)\n```",
          "html": "<pre><code>// input\no-lerp(#ff0000, rgb(0,0,255,0))\n// output\nrgba(128,0,128,0.5)\n</code></pre>"
        },
        {
          "type": "param",
          "string": "color1 - CSS rgb, rgba, or hex string",
          "name": "color1",
          "description": "<ul>\n<li>CSS rgb, rgba, or hex string</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "param",
          "string": "color2 - CSS rgb, rgba, or hex string",
          "name": "color2",
          "description": "<ul>\n<li>CSS rgb, rgba, or hex string</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "param",
          "string": "factor - [0,1] or [0 100%]",
          "name": "factor",
          "description": "<ul>\n<li>[0,1] or [0 100%]</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "return",
          "string": "CSS rgba color",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false,
          "description": "<p>CSS rgba color</p>"
        }
      ],
      "description": {
        "full": "",
        "summary": "",
        "body": ""
      },
      "isPrivate": false,
      "isConstructor": false,
      "isClass": false,
      "isEvent": false,
      "ignore": false,
      "line": 9,
      "codeStart": 32,
      "code": "lerp(color1, color2, factor) {\n  const c1 = util.colorToArray(color1);\n  const c2 = util.colorToArray(color2);\n  let c1a, c2a;\n  c1a = c1.length === 4 ? c1.pop() : 1;\n  c2a = c2.length === 4 ? c2.pop() : 1;\n  const a = (c1a+c2a)/2;\n  if (factor && factor.endsWith('%')) {\n    factor = factor.replace('%', '') * 0.01;\n  }\n  const mixed = util.lerp(c1, c2, factor);\n  mixed.push(a !== undefined ? a : 1);\n  return `rgba(${mixed.join()})`;\n},",
      "ctx": {
        "type": "method",
        "name": "lerp",
        "string": "lerp()"
      }
    },
    {
      "tags": [
        {
          "type": "function",
          "string": "o-mdc(color, shade, [alpha=1])",
          "html": "<p>o-mdc(color, shade, [alpha=1])</p>"
        },
        {
          "type": "desc",
          "string": "Material design colors accessor",
          "html": "<p>Material design colors accessor</p>"
        },
        {
          "type": "example",
          "string": "```\n// input\no-md(red, 500)\n// output\n#f44336\n\n// alpha support:\n// input\no-md(red, 500, 0.5)\n// output\nrgba(244, 67, 54, 0.5)\n```",
          "html": "<pre><code>// input\no-md(red, 500)\n// output\n#f44336\n\n// alpha support:\n// input\no-md(red, 500, 0.5)\n// output\nrgba(244, 67, 54, 0.5)\n</code></pre>"
        },
        {
          "type": "param",
          "string": "color - material design color name",
          "name": "color",
          "description": "<ul>\n<li>material design color name</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "param",
          "string": "shade - material design color shade",
          "name": "shade",
          "description": "<ul>\n<li>material design color shade</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "param",
          "string": "[alpha] - range [0 1]",
          "name": "[alpha]",
          "description": "<ul>\n<li>range [0 1]</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "return",
          "string": "CSS hex color, or CSS rgba color if `alpha` was passed",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false,
          "description": "<p>CSS hex color, or CSS rgba color if <code>alpha</code> was passed</p>"
        },
        {
          "type": "alias",
          "string": "o-md",
          "html": "<p>o-md</p>"
        },
        {
          "type": "alias",
          "string": "o-md-color",
          "html": "<p>o-md-color</p>"
        }
      ],
      "description": {
        "full": "",
        "summary": "",
        "body": ""
      },
      "isPrivate": false,
      "isConstructor": false,
      "isClass": false,
      "isEvent": false,
      "ignore": false,
      "line": 47,
      "codeStart": 76,
      "code": "mdc(color, shade, alpha) {\n  color = util.dashToCamel(color);\n  color = md.materialColors[color][shade];\n  if (alpha) {\n    color = util.hexToRgb(color);\n    color.push(alpha);\n    return `rgba(${color.join})`;\n  }\n  return color;\n},",
      "ctx": {
        "type": "method",
        "name": "mdc",
        "string": "mdc()"
      }
    },
    {
      "tags": [
        {
          "type": "function",
          "string": "o-cmdc(color)",
          "html": "<p>o-cmdc(color)</p>"
        },
        {
          "type": "desc",
          "string": "Find the material design color that is closest to `color`.",
          "html": "<p>Find the material design color that is closest to <code>color</code>.</p>"
        },
        {
          "type": "param",
          "string": "color - CSS hex color",
          "name": "color",
          "description": "<ul>\n<li>CSS hex color</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "return",
          "string": "CSS hex color",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false,
          "description": "<p>CSS hex color</p>"
        },
        {
          "type": "alias",
          "string": "o-closest",
          "html": "<p>o-closest</p>"
        }
      ],
      "description": {
        "full": "",
        "summary": "",
        "body": ""
      },
      "isPrivate": false,
      "isConstructor": false,
      "isClass": false,
      "isEvent": false,
      "ignore": false,
      "line": 87,
      "codeStart": 99,
      "code": "cmdc(color) {\n  let min = Infinity;\n  let minIndex = 0;\n  if (md.flattened.indexOf(color) > -1) return color;\n  md.flattened.some((x, i) => {\n    const d = new Levenshtein(x, color).distance;\n    if (d < min) {\n      min = d;\n      minIndex = i;\n      // if d was zero, then the md.includes call would\n      // have worked, therefor, 1 is the next closes match.\n      if (d === 1) return true;\n    }\n    return false;\n  });\n  return md.flattened[minIndex];\n},",
      "ctx": {
        "type": "method",
        "name": "cmdc",
        "string": "cmdc()"
      }
    },
    {
      "tags": [
        {
          "type": "function",
          "string": "o-red(value, [alpha=1])",
          "html": "<p>o-red(value, [alpha=1])</p>"
        },
        {
          "type": "desc",
          "string": "Get a shade of red between 0-255",
          "html": "<p>Get a shade of red between 0-255</p>"
        },
        {
          "type": "param",
          "string": "value - range [0, 255]",
          "name": "value",
          "description": "<ul>\n<li>range [0, 255]</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "param",
          "string": "[alpha] - range [0, 1]",
          "name": "[alpha]",
          "description": "<ul>\n<li>range [0, 1]</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "return",
          "string": "CSS rgba color",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false,
          "description": "<p>CSS rgba color</p>"
        }
      ],
      "description": {
        "full": "",
        "summary": "",
        "body": ""
      },
      "isPrivate": false,
      "isConstructor": false,
      "isClass": false,
      "isEvent": false,
      "ignore": false,
      "line": 117,
      "codeStart": 128,
      "code": "red(x, alpha) {\n  x = clamp(x);\n  return `rgba(${x}, 0, 0, ${alpha||1})`;\n},",
      "ctx": {
        "type": "method",
        "name": "red",
        "string": "red()"
      }
    },
    {
      "tags": [
        {
          "type": "function",
          "string": "o-orange(value, [alpha=1])",
          "html": "<p>o-orange(value, [alpha=1])</p>"
        },
        {
          "type": "desc",
          "string": "Get a shade of orange between 0-255",
          "html": "<p>Get a shade of orange between 0-255</p>"
        },
        {
          "type": "param",
          "string": "value - range [0, 255]",
          "name": "value",
          "description": "<ul>\n<li>range [0, 255]</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "param",
          "string": "[alpha] - range [0, 1]",
          "name": "[alpha]",
          "description": "<ul>\n<li>range [0, 1]</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "return",
          "string": "CSS rgba color",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false,
          "description": "<p>CSS rgba color</p>"
        }
      ],
      "description": {
        "full": "",
        "summary": "",
        "body": ""
      },
      "isPrivate": false,
      "isConstructor": false,
      "isClass": false,
      "isEvent": false,
      "ignore": false,
      "line": 133,
      "codeStart": 144,
      "code": "orange(x, alpha) {\n  x = clamp(x);\n  return `rgba(${x}, ${clamp(x/2)}, 0, ${alpha||1})`;\n},",
      "ctx": {
        "type": "method",
        "name": "orange",
        "string": "orange()"
      }
    },
    {
      "tags": [
        {
          "type": "function",
          "string": "o-yellow(value, [alpha=1])",
          "html": "<p>o-yellow(value, [alpha=1])</p>"
        },
        {
          "type": "desc",
          "string": "Get a shade of yellow between 0-255",
          "html": "<p>Get a shade of yellow between 0-255</p>"
        },
        {
          "type": "param",
          "string": "value - range [0, 255]",
          "name": "value",
          "description": "<ul>\n<li>range [0, 255]</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "param",
          "string": "[alpha] - range [0, 1]",
          "name": "[alpha]",
          "description": "<ul>\n<li>range [0, 1]</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "return",
          "string": "CSS rgba color",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false,
          "description": "<p>CSS rgba color</p>"
        }
      ],
      "description": {
        "full": "",
        "summary": "",
        "body": ""
      },
      "isPrivate": false,
      "isConstructor": false,
      "isClass": false,
      "isEvent": false,
      "ignore": false,
      "line": 149,
      "codeStart": 160,
      "code": "yellow(x, alpha) {\n  x = clamp(x);\n  return `rgba(${x}, ${x}, 0, ${alpha||1})`;\n},",
      "ctx": {
        "type": "method",
        "name": "yellow",
        "string": "yellow()"
      }
    },
    {
      "tags": [
        {
          "type": "function",
          "string": "o-green(value, [alpha=1])",
          "html": "<p>o-green(value, [alpha=1])</p>"
        },
        {
          "type": "desc",
          "string": "Get a shade of green between 0-255",
          "html": "<p>Get a shade of green between 0-255</p>"
        },
        {
          "type": "param",
          "string": "value - range [0, 255]",
          "name": "value",
          "description": "<ul>\n<li>range [0, 255]</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "param",
          "string": "[alpha] - range [0, 1]",
          "name": "[alpha]",
          "description": "<ul>\n<li>range [0, 1]</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "return",
          "string": "CSS rgba color",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false,
          "description": "<p>CSS rgba color</p>"
        }
      ],
      "description": {
        "full": "",
        "summary": "",
        "body": ""
      },
      "isPrivate": false,
      "isConstructor": false,
      "isClass": false,
      "isEvent": false,
      "ignore": false,
      "line": 165,
      "codeStart": 176,
      "code": "green(x, alpha) {\n  x = clamp(x);\n  return `rgba(0, ${x}, 0, ${alpha||1})`;\n},",
      "ctx": {
        "type": "method",
        "name": "green",
        "string": "green()"
      }
    },
    {
      "tags": [
        {
          "type": "function",
          "string": "o-cyan(value, [alpha=1])",
          "html": "<p>o-cyan(value, [alpha=1])</p>"
        },
        {
          "type": "desc",
          "string": "Get a shade of cyan between 0-255",
          "html": "<p>Get a shade of cyan between 0-255</p>"
        },
        {
          "type": "param",
          "string": "value - range [0, 255]",
          "name": "value",
          "description": "<ul>\n<li>range [0, 255]</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "param",
          "string": "[alpha] - range [0, 1]",
          "name": "[alpha]",
          "description": "<ul>\n<li>range [0, 1]</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "return",
          "string": "CSS rgba color",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false,
          "description": "<p>CSS rgba color</p>"
        }
      ],
      "description": {
        "full": "",
        "summary": "",
        "body": ""
      },
      "isPrivate": false,
      "isConstructor": false,
      "isClass": false,
      "isEvent": false,
      "ignore": false,
      "line": 181,
      "codeStart": 192,
      "code": "cyan(x, alpha) {\n  x = clamp(x);\n  return `rgba(0, ${x}, ${x}, ${alpha||1})`;\n},",
      "ctx": {
        "type": "method",
        "name": "cyan",
        "string": "cyan()"
      }
    },
    {
      "tags": [
        {
          "type": "function",
          "string": "o-blue(value, [alpha=1])",
          "html": "<p>o-blue(value, [alpha=1])</p>"
        },
        {
          "type": "desc",
          "string": "Get a shade of blue between 0-255",
          "html": "<p>Get a shade of blue between 0-255</p>"
        },
        {
          "type": "param",
          "string": "value - range [0, 255]",
          "name": "value",
          "description": "<ul>\n<li>range [0, 255]</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "param",
          "string": "[alpha] - range [0, 1]",
          "name": "[alpha]",
          "description": "<ul>\n<li>range [0, 1]</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "return",
          "string": "CSS rgba color",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false,
          "description": "<p>CSS rgba color</p>"
        }
      ],
      "description": {
        "full": "",
        "summary": "",
        "body": ""
      },
      "isPrivate": false,
      "isConstructor": false,
      "isClass": false,
      "isEvent": false,
      "ignore": false,
      "line": 197,
      "codeStart": 208,
      "code": "blue(x, alpha) {\n  x = clamp(x);\n  return `rgba(0, 0, ${x}, ${alpha||1})`;\n},",
      "ctx": {
        "type": "method",
        "name": "blue",
        "string": "blue()"
      }
    },
    {
      "tags": [
        {
          "type": "function",
          "string": "o-violet(value, [alpha=1])",
          "html": "<p>o-violet(value, [alpha=1])</p>"
        },
        {
          "type": "desc",
          "string": "Get a shade of violet between 0-255",
          "html": "<p>Get a shade of violet between 0-255</p>"
        },
        {
          "type": "param",
          "string": "value - range [0, 255]",
          "name": "value",
          "description": "<ul>\n<li>range [0, 255]</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "param",
          "string": "[alpha] - range [0, 1]",
          "name": "[alpha]",
          "description": "<ul>\n<li>range [0, 1]</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "return",
          "string": "CSS rgba color",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false,
          "description": "<p>CSS rgba color</p>"
        },
        {
          "type": "alias",
          "string": "o-purple",
          "html": "<p>o-purple</p>"
        }
      ],
      "description": {
        "full": "",
        "summary": "",
        "body": ""
      },
      "isPrivate": false,
      "isConstructor": false,
      "isClass": false,
      "isEvent": false,
      "ignore": false,
      "line": 213,
      "codeStart": 225,
      "code": "violet(x, alpha) {\n  x = clamp(x);\n  return `rgba(${clamp(x/2)}, 0, ${x}, ${alpha||1})`;\n},",
      "ctx": {
        "type": "method",
        "name": "violet",
        "string": "violet()"
      }
    },
    {
      "tags": [
        {
          "type": "function",
          "string": "o-magenta(value, [alpha=1])",
          "html": "<p>o-magenta(value, [alpha=1])</p>"
        },
        {
          "type": "desc",
          "string": "Get a shade of magenta between 0-255",
          "html": "<p>Get a shade of magenta between 0-255</p>"
        },
        {
          "type": "param",
          "string": "value - range [0, 255]",
          "name": "value",
          "description": "<ul>\n<li>range [0, 255]</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "param",
          "string": "[alpha] - range [0, 1]",
          "name": "[alpha]",
          "description": "<ul>\n<li>range [0, 1]</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "return",
          "string": "CSS rgba color",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false,
          "description": "<p>CSS rgba color</p>"
        },
        {
          "type": "alias",
          "string": "o-pink",
          "html": "<p>o-pink</p>"
        }
      ],
      "description": {
        "full": "",
        "summary": "",
        "body": ""
      },
      "isPrivate": false,
      "isConstructor": false,
      "isClass": false,
      "isEvent": false,
      "ignore": false,
      "line": 230,
      "codeStart": 242,
      "code": "magenta(x, alpha) {\n  x = clamp(x);\n  return `rgba(${x}, 0, ${x}, ${alpha||1})`;\n},",
      "ctx": {
        "type": "method",
        "name": "magenta",
        "string": "magenta()"
      }
    },
    {
      "tags": [
        {
          "type": "function",
          "string": "o-gray(value, [alpha=1])",
          "html": "<p>o-gray(value, [alpha=1])</p>"
        },
        {
          "type": "desc",
          "string": "Get a shade of gray between 0-255",
          "html": "<p>Get a shade of gray between 0-255</p>"
        },
        {
          "type": "param",
          "string": "value - range [0, 255]",
          "name": "value",
          "description": "<ul>\n<li>range [0, 255]</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "param",
          "string": "[alpha] - range [0, 1]",
          "name": "[alpha]",
          "description": "<ul>\n<li>range [0, 1]</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "return",
          "string": "CSS rgba color",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false,
          "description": "<p>CSS rgba color</p>"
        },
        {
          "type": "alias",
          "string": "o-grayscale",
          "html": "<p>o-grayscale</p>"
        },
        {
          "type": "alias",
          "string": "o-gray-scale",
          "html": "<p>o-gray-scale</p>"
        },
        {
          "type": "alias",
          "string": "o-grey",
          "html": "<p>o-grey</p>"
        },
        {
          "type": "alias",
          "string": "o-greyscale",
          "html": "<p>o-greyscale</p>"
        },
        {
          "type": "alias",
          "string": "o-grey-scale",
          "html": "<p>o-grey-scale</p>"
        }
      ],
      "description": {
        "full": "",
        "summary": "",
        "body": ""
      },
      "isPrivate": false,
      "isConstructor": false,
      "isClass": false,
      "isEvent": false,
      "ignore": false,
      "line": 247,
      "codeStart": 264,
      "code": "gray(x, alpha) {\n  x = clamp(x);\n  x = [x, x, x].join(',');\n  return `rgba(${x},${alpha||1})`;\n}\n};\n\n// aliases\nf.grayscale = f.gray;\nf['gray-scale'] = f.gray;\nf.grey = f.gray;\nf.greyscale = f.gray;\nf['grey-scale'] = f.gray;\n\nf.purple = f.violet;\nf.pink = f.magenta;\n\nf['md-color'] = f.mdc;\nf.md = f.mdc;\nf['closest-md-color'] = f.cmdc;\nf.cmd = f.cmdc;\n\nmodule.exports = f;\n\nfunction clamp(x) {\nx = x > 255 ? 255 : x < 0 ? 0 : x;\nreturn Math.round(x);\n}",
      "ctx": {
        "type": "method",
        "name": "gray",
        "string": "gray()"
      }
    }
  ],
  [
    {
      "tags": [
        {
          "type": "mixin",
          "string": "o-golden-ratio([number=100], [scale=1])",
          "html": "<p>o-golden-ratio([number=100], [scale=1])</p>"
        },
        {
          "type": "desc",
          "string": "Get the golden ratio of `number` recursively scaled\n`scale` times. A scale setting less then 1 will return\nthe smaller portion.",
          "html": "<p>Get the golden ratio of <code>number</code> recursively scaled<br /><code>scale</code> times. A scale setting less then 1 will return<br />the smaller portion.</p>"
        },
        {
          "type": "example",
          "string": "```css\no-golden-ratio(30,  1) //=> 48.54102\no-golden-ratio(30,  2) //=> 78.54102\no-golden-ratio(30, -1) //=> 18.54102\no-golden-ratio(30, -2) //=> 11.45898\n```",
          "html": "<pre><code class=\"lang-css\">o-golden-ratio(30,  1) //=&gt; 48.54102\no-golden-ratio(30,  2) //=&gt; 78.54102\no-golden-ratio(30, -1) //=&gt; 18.54102\no-golden-ratio(30, -2) //=&gt; 11.45898\n</code></pre>\n"
        },
        {
          "type": "param",
          "string": "number - the base number",
          "name": "number",
          "description": "<ul>\n<li>the base number</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "param",
          "string": "scale - the factor to scale `number` by",
          "name": "scale",
          "description": "<ul>\n<li>the factor to scale <code>number</code> by</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "return",
          "string": "The \"A\" (larger) portion if `number` is positive; \"C\" otherwise",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false,
          "description": "<p>The &quot;A&quot; (larger) portion if <code>number</code> is positive; &quot;C&quot; otherwise</p>"
        },
        {
          "type": "alias",
          "string": "o-golden",
          "html": "<p>o-golden</p>"
        }
      ],
      "description": {
        "full": "",
        "summary": "",
        "body": ""
      },
      "isPrivate": false,
      "isConstructor": false,
      "isClass": false,
      "isEvent": false,
      "ignore": false,
      "line": 7,
      "codeStart": 27,
      "code": "function goldenRatio(number, scale) {\n  number = number || 100;\n  scale = scale || 1;\n\n  let unit = '';\n\n  if (typeof number === 'string') {\n    unit = number.replace(/\\d/g, '');\n    number = number.replace(/\\D/g, '');\n  }\n\n  let ret = parseFloat(number);\n  let n = parseFloat(scale);\n\n  if (scale < 0) {\n    while (n < 0) {\n      ret = ret * (PHI - 1);\n      n++;\n    }\n\n  } else if (scale > 0) {\n    while (n > 0) {\n      ret *= PHI;\n      n--;\n    }\n  }\n\n  return ret + unit;\n}",
      "ctx": {
        "type": "function",
        "name": "goldenRatio",
        "string": "goldenRatio()"
      }
    }
  ],
  [
    {
      "tags": [
        {
          "type": "function",
          "string": "o-random ([min=0], [max=256], [float=false [, inclusive=false]])",
          "html": "<p>o-random ([min=0], [max=256], [float=false [, inclusive=false]])</p>"
        },
        {
          "type": "desc",
          "string": "Get a random number between `min` and `max`, inclusive.\nRandom number generation provided by\n[random-js](https://github.com/ckknight/random-js)",
          "html": "<p>Get a random number between <code>min</code> and <code>max</code>, inclusive.<br />Random number generation provided by<br /><a href=\"https://github.com/ckknight/random-js\">random-js</a></p>"
        },
        {
          "type": "param",
          "string": "min - range minimum (default = 0)",
          "name": "min",
          "description": "<ul>\n<li>range minimum (default = 0)</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "param",
          "string": "max - output range maximum (default = 255)",
          "name": "max",
          "description": "<ul>\n<li>output range maximum (default = 255)</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "param",
          "string": "float - if truthy, output is floating point, default is false (integer output)",
          "name": "float",
          "description": "<ul>\n<li>if truthy, output is floating point, default is false (integer output)</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "param",
          "string": "inclusive - if `float` is true, choose to include 0 and 1 (default false)",
          "name": "inclusive",
          "description": "<ul>\n<li>if <code>float</code> is true, choose to include 0 and 1 (default false)</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        }
      ],
      "description": {
        "full": "",
        "summary": "",
        "body": ""
      },
      "isPrivate": false,
      "isConstructor": false,
      "isClass": false,
      "isEvent": false,
      "ignore": false,
      "line": 8,
      "codeStart": 19,
      "code": "function random(min, max, float, inclusive) {\n  min = min || 0;\n  max = max || 256;\n  float = !!float;\n  return float\n    ? _random.real(min, max, inclusive)\n    : _random.integer(min, max);\n}",
      "ctx": {
        "type": "function",
        "name": "random",
        "string": "random()"
      }
    }
  ],
  [
    {
      "tags": [
        {
          "type": "function",
          "string": "o-str([input])",
          "html": "<p>o-str([input])</p>"
        },
        {
          "type": "desc",
          "string": "Wrap input as string, ensures output\nin css is wrapped in quotes.",
          "html": "<p>Wrap input as string, ensures output<br />in css is wrapped in quotes.</p>"
        },
        {
          "type": "param",
          "string": "input - anything",
          "name": "input",
          "description": "<ul>\n<li>anything</li>\n</ul>\n",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false
        },
        {
          "type": "return",
          "string": "\"`input`\"",
          "types": [],
          "typesDescription": "",
          "variable": false,
          "nonNullable": false,
          "nullable": false,
          "optional": false,
          "description": "<p>&quot;<code>input</code>&quot;</p>"
        }
      ],
      "description": {
        "full": "",
        "summary": "",
        "body": ""
      },
      "isPrivate": false,
      "isConstructor": false,
      "isClass": false,
      "isEvent": false,
      "ignore": false,
      "line": 5,
      "codeStart": 13,
      "code": "function str(input) {\n  return `\"${input}\"`;\n}",
      "ctx": {
        "type": "function",
        "name": "str",
        "string": "str()"
      }
    }
  ]
]